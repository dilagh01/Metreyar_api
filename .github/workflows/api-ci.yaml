name: Build Complete Project Structure

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/setup-structure.yml'

jobs:
  build-project-structure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create project structure
        run: |
          mkdir -p backend/app/{api/v1,models,schemas,database,core}
          mkdir -p backend/tests
          mkdir -p data/migrations
          mkdir -p scripts
          
          for dir in backend backend/app backend/app/api backend/app/api/v1 backend/app/models \
                    backend/app/schemas backend/app/database backend/app/core backend/tests; do
            touch $dir/__init__.py
          done
          echo "✅ ساختار دایرکتوری‌ها ایجاد شد"

      - name: Create main application files
        run: |
          cat > backend/app/main.py << 'EOL'
          from fastapi import FastAPI, Depends
          from sqlalchemy.ext.asyncio import AsyncSession
          from app.api.v1 import api_router
          from app.database.session import get_db

          app = FastAPI(title="Construction Estimator API", version="1.0.0")

          @app.get("/health")
          async def health_check(db: AsyncSession = Depends(get_db)):
              try:
                  await db.execute("SELECT 1")
                  return {"status": "healthy", "database": "connected"}
              except Exception:
                  return {"status": "healthy", "database": "disconnected"}

          @app.get("/")
          async def root():
              return {
                  "message": "خوش آمدید به سرویس متره و برآورد",
                  "version": "1.0.0",
                  "docs": "/docs"
              }

          app.include_router(api_router, prefix="/api/v1")
          EOL
          echo "✅ فایل main.py ایجاد شد"

      - name: Create database configuration
        run: |
          cat > backend/app/database/session.py << 'EOL'
          from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
          from sqlalchemy.orm import sessionmaker, declarative_base
          from sqlalchemy.ext.asyncio import AsyncEngine
          from typing import AsyncGenerator
          import os

          DATABASE_URL = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./metreyar.db")

          engine: AsyncEngine = create_async_engine(
              DATABASE_URL,
              echo=True,
              future=True
          )

          AsyncSessionLocal = sessionmaker(
              engine, class_=AsyncSession, expire_on_commit=False
          )

          Base = declarative_base()

          async def get_db() -> AsyncGenerator[AsyncSession, None]:
              async with AsyncSessionLocal() as session:
                  try:
                      yield session
                      await session.commit()
                  except Exception:
                      await session.rollback()
                      raise
                  finally:
                      await session.close()
          EOL
          echo "✅ فایل‌های دیتابیس ایجاد شدند"

      # ادامه job ها دقیقا مثل قبل ...
