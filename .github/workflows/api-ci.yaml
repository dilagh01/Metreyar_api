name: Create Complete Project Structure

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/create-structure.yml'
      - 'backend/**'
      - 'requirements.txt'
      - 'docker-compose.yml'
      - 'Dockerfile'

jobs:
  create-structure:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 alembic

    - name: Create complete project structure
      run: |
        echo "📁 ایجاد ساختار دایرکتوری‌ها..."
        mkdir -p backend/app/{api/v1,models,schemas,database,core,services}
        mkdir -p backend/tests
        mkdir -p data/migrations
        mkdir -p scripts
        mkdir -p docs

        for dir in backend backend/app backend/app/api backend/app/api/v1 \
                 backend/app/models backend/app/schemas backend/app/database \
                 backend/app/core backend/app/services backend/tests; do
          touch "$dir/__init__.py"
        done
        echo "✅ ساختار دایرکتوری‌ها ایجاد شد"

     - name: Create main application file
      run: |
        cat > backend/app/main.py << 'EOL'
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.session import engine, get_db
from app.database.base import Base
from app.api.v1 import api_router
from app.core.config import settings

@asynccontextmanager
async def lifespan(app: FastAPI):
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    yield
    await engine.dispose()

app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="API سیستم متره و برآورد پروژه‌های ساختمانی",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(api_router, prefix=settings.API_V1_STR)

@app.get("/")
async def root():
    return {"message": "خوش آمدید به سرویس متره‌یار", "version": settings.VERSION, "docs": "/docs"}

@app.get("/health")
async def health_check(db: AsyncSession = Depends(get_db)):
    try:
        await db.execute("SELECT 1")
        return {"status": "healthy", "database": "connected"}
    except Exception:
        return {"status": "healthy", "database": "disconnected"}
EOL

    - name: Create database files
      run: |
        cat > backend/app/database/session.py << 'EOL'
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

engine = create_async_engine(settings.DATABASE_URL, echo=settings.DEBUG, future=True)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()
        EOL

        cat > backend/app/database/base.py << 'EOL'
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, Integer, DateTime, func

Base = declarative_base()

class BaseModel(Base):
    __abstract__ = True
    id = Column(Integer, primary_key=True, index=True)
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
        EOL

    - name: Create core configuration and security
      run: |
        cat > backend/app/core/config.py << 'EOL'
from pydantic_settings import BaseSettings
from typing import List
import os

class Settings(BaseSettings):
    PROJECT_NAME: str = "Metreyar API"
    VERSION: str = "1.0.0"
    API_V1_STR: str = "/api/v1"

    DATABASE_URL: str = os.getenv("DATABASE_URL", "sqlite+aiosqlite:///./metreyar.db")
    SECRET_KEY: str = os.getenv("SECRET_KEY", "your-secret-key-here")
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8

    BACKEND_CORS_ORIGINS: List[str] = ["*"]
    DEBUG: bool = os.getenv("DEBUG", "False").lower() == "true"

    class Config:
        case_sensitive = True
        env_file = ".env"

settings = Settings()
        EOL

        cat > backend/app/core/security.py << 'EOL'
from datetime import datetime, timedelta
from jose import jwt, JWTError
from passlib.context import CryptContext
from app.core.config import settings

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    return pwd_context.verify(plain_password, hashed_password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.ALGORITHM)

def decode_access_token(token: str):
    try:
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        return payload
    except JWTError:
        return None
        EOL

    - name: Create models
      run: |
        cat > backend/app/models/material.py << 'EOL'
from sqlalchemy import Column, String, Float, Text
from app.database.base import BaseModel

class Material(BaseModel):
    __tablename__ = "materials"
    name = Column(String(100), nullable=False, index=True)
    description = Column(Text)
    unit = Column(String(20), nullable=False)
    unit_price = Column(Float, nullable=False)
    category = Column(String(50), nullable=False)
    code = Column(String(20), unique=True)
        EOL

    - name: Create requirements and env
      run: |
        cat > requirements.txt << 'EOL'
fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
aiosqlite==0.19.0
alembic==1.12.1
pydantic==2.5.0
pydantic-settings==2.1.0
python-multipart==0.0.6
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-dotenv==1.0.0
pytest==7.4.3
httpx==0.25.2
        EOL

        cat > .env.example << 'EOL'
DATABASE_URL=sqlite+aiosqlite:///./metreyar.db
SECRET_KEY=your-super-secret-key-change-in-production
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=1440
DEBUG=True
PROJECT_NAME=Metreyar API
VERSION=1.0.0
API_V1_STR=/api/v1
        EOL
