name: Create Complete Project Structure

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/api_ci.yaml'

jobs:
  create-structure:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn sqlalchemy aiosqlite pydantic pydantic-settings python-jose passlib python-dotenv

    - name: Create backend directory structure
      run: |
        echo "📁 Creating directory structure..."
        mkdir -p backend/app/{api/v1,models,schemas,database,core,services}
        mkdir -p backend/tests
        mkdir -p data/migrations
        mkdir -p scripts
        mkdir -p docs

        for dir in backend backend/app backend/app/api backend/app/api/v1 \
                 backend/app/models backend/app/schemas backend/app/database \
                 backend/app/core backend/app/services backend/tests; do
          touch "$dir/__init__.py"
        done

        echo "✅ Directory structure created"

    - name: Create main.py
      run: |
        cat > backend/app/main.py << 'EOL'
from fastapi import FastAPI

app = FastAPI(title="Metreyar API", version="1.0.0")

@app.get("/")
def root():
    return {"message": "خوش آمدید به سرویس متره‌یار"}
EOL

    - name: Create database files
      run: |
        cat > backend/app/database/session.py << 'EOL'
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite+aiosqlite:///./metreyar.db"
engine = create_async_engine(DATABASE_URL, echo=True, future=True)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()
EOL

        cat > backend/app/database/base.py << 'EOL'
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, Integer, DateTime, func

Base = declarative_base()

class BaseModel(Base):
    __abstract__ = True
    id = Column(Integer, primary_key=True, index=True)
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
EOL

    - name: Create core config
      run: |
        cat > backend/app/core/config.py << 'EOL'
from pydantic_settings import BaseSettings
from typing import List

class Settings(BaseSettings):
    PROJECT_NAME: str = "Metreyar API"
    VERSION: str = "1.0.0"
    API_V1_STR: str = "/api/v1"
    DATABASE_URL: str = "sqlite+aiosqlite:///./metreyar.db"
    SECRET_KEY: str = "your-secret-key"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60*24*8
    BACKEND_CORS_ORIGINS: List[str] = ["*"]
    DEBUG: bool = True

settings = Settings()
EOL
