name: Build Metreyar API Structure

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - '.github/workflows/build-api-structure.yml'

jobs:
  build-api-structure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Create API directory structure
      run: |
        mkdir -p backend/app/{api,endpoints,models,services,utils,core,database,schemas}
        mkdir -p backend/tests
        mkdir -p data/migrations
        mkdir -p docs

        for d in backend backend/app backend/app/api backend/app/endpoints backend/app/models backend/app/services backend/app/utils backend/app/core backend/app/database backend/tests backend/app/schemas; do
          touch $d/__init__.py
        done

        echo "✅ ساختار دایرکتوری‌ها ایجاد شد"
        
    - name: Create main application files
      run: |
        cat > backend/app/main.py << 'EOL'
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.session import engine, Base, get_db
from app.api.v1 import api_router
from app.core.config import settings

@asynccontextmanager
async def lifespan(app: FastAPI):
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    yield
    await engine.dispose()

app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="API سیستم متره و برآورد پروژه‌های ساختمانی",
    lifespan=lifespan
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.BACKEND_CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(api_router, prefix=settings.API_V1_STR)

@app.get("/")
async def root():
    return {
        "message": "خوش آمدید به سرویس متره‌یار",
        "version": settings.VERSION,
        "docs": "/docs"
    }

@app.get("/health")
async def health_check(db: AsyncSession = Depends(get_db)):
    try:
        await db.execute("SELECT 1")
        return {"status": "healthy", "database": "connected"}
    except Exception:
        return {"status": "healthy", "database": "disconnected"}
EOL

        echo "✅ فایل main.py ایجاد شد"
        
    - name: Create database configuration
      run: |
        cat > backend/app/database/session.py << 'EOL'
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from app.core.config import settings

engine = create_async_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,
    future=True
)

AsyncSessionLocal = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

Base = declarative_base()

async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()
EOL

        cat > backend/app/database/base.py << 'EOL'
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, DateTime, func

Base = declarative_base()

class BaseModel(Base):
    __abstract__ = True
    
    id = Column(Integer, primary_key=True, index=True)
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
EOL

        echo "✅ فایل‌های دیتابیس ایجاد شدند"
        
    - name: Create models
      run: |
        cat > backend/app/models/material.py << 'EOL'
from sqlalchemy import Column, String, Float, Text, ForeignKey
from sqlalchemy.orm import relationship
from app.database.base import BaseModel

class Material(BaseModel):
    __tablename__ = "materials"
    
    name = Column(String(100), nullable=False, index=True)
    description = Column(Text)
    unit = Column(String(20), nullable=False)
    unit_price = Column(Float, nullable=False)
    category = Column(String(50), nullable=False)
    code = Column(String(20), unique=True)
    
    estimation_items = relationship("EstimationItem", back_populates="material")
EOL

        cat > backend/app/models/estimation.py << 'EOL'
from sqlalchemy import Column, String, Float, Text, ForeignKey
from sqlalchemy.orm import relationship
from app.database.base import BaseModel

class Estimation(BaseModel):
    __tablename__ = "estimations"
    
    title = Column(String(200), nullable=False)
    description = Column(Text)
    total_cost = Column(Float, default=0.0)
    status = Column(String(20), default="draft")
    
    items = relationship("EstimationItem", back_populates="estimation", cascade="all, delete-orphan")

class EstimationItem(BaseModel):
    __tablename__ = "estimation_items"
    
    estimation_id = Column(ForeignKey("estimations.id"), nullable=False)
    material_id = Column(ForeignKey("materials.id"), nullable=False)
    quantity = Column(Float, nullable=False)
    unit_price = Column(Float, nullable=False)
    total_price = Column(Float, nullable=False)
    notes = Column(Text)
    
    estimation = relationship("Estimation", back_populates="items")
    material = relationship("Material", back_populates="estimation_items")
EOL

        cat > backend/app/models/category.py << 'EOL'
from sqlalchemy import Column, String, Text
from app.database.base import BaseModel

class Category(BaseModel):
    __tablename__ = "categories"
    
    name = Column(String(50), unique=True, nullable=False)
    description = Column(Text)
EOL

        echo "✅ مدل‌های دیتابیس ایجاد شدند"
        
    - name: Create API routes
      run: |
        mkdir -p backend/app/api/v1
        cat > backend/app/api/v1/__init__.py << 'EOL'
from fastapi import APIRouter
from app.api.v1 import materials

api_router = APIRouter()
api_router.include_router(materials.router, prefix="/materials", tags=["materials"])
EOL

        # نمونه متریال‌ها (دیگر endpointها مشابه اضافه می‌شوند)
        cat > backend/app/api/v1/materials.py << 'EOL'
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from typing import List, Optional
from app.database.session import get_db
from app.models.material import Material
from app.schemas.material import MaterialCreate, MaterialResponse, MaterialUpdate

router = APIRouter()

@router.get("/", response_model=List[MaterialResponse])
async def get_materials(skip: int = 0, limit: int = 100, db: AsyncSession = Depends(get_db)):
    result = await db.execute(select(Material).offset(skip).limit(limit))
    return result.scalars().all()
EOL

        echo "✅ endpointهای API ایجاد شدند"
        
    - name: Create schemas
      run: |
        cat > backend/app/schemas/material.py << 'EOL'
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class MaterialBase(BaseModel):
    name: str
    description: Optional[str] = None
    unit: str
    unit_price: float
    category: str
    code: Optional[str] = None

class MaterialCreate(MaterialBase):
    pass

class MaterialUpdate(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    unit: Optional[str] = None
    unit_price: Optional[float] = None
    category: Optional[str] = None
    code: Optional[str] = None

class MaterialResponse(MaterialBase):
    id: int
    created_at: datetime
    updated_at: datetime
    
    class Config:
        from_attributes = True
EOL

        echo "✅ schemaهای Pydantic ایجاد شدند"
        
    - name: Create test file
      run: |
        cat > backend/tests/test_health.py << 'EOL'
from fastapi.testclient import TestClient
from backend.app.main import app

client = TestClient(app)

def test_health():
    response = client.get("/health")
    assert response.status_code == 200
EOL

        echo "✅ تست ساده اضافه شد"

    - name: Init Alembic
      run: |
        alembic init data/migrations || true
        echo "✅ Alembic آماده شد"
