name: Metreyar API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: postgresql://test:test@localhost:5432/metreyar_test

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: metreyar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov httpx

    - name: Run tests
      run: |
        pytest -v --cov=app --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  lint:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install linting tools
      run: |
        pip install black flake8 isort

    - name: Check code formatting with Black
      run: |
        black --check app/ main.py

    - name: Check import sorting with isort
      run: |
        isort --check-only app/ main.py

    - name: Lint with flake8
      run: |
        flake8 app/ main.py --max-line-length=88 --ignore=E203,W503

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/metreyar-api:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/metreyar-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
    - name: Deploy to staging
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/metreyar-staging
          docker-compose pull
          docker-compose up -d
          docker image prune -f

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/metreyar-production
          docker-compose pull
          docker-compose up -d
          docker image prune -f

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: actions/checkout@v4
      run: |
        pip install safety
        safety check -r requirements.txt

    - name: Run bandit security scanner
      run: |
        pip install bandit
        bandit -r app/ -x tests

  notify:
    runs-on: ubuntu-latest
    needs: [test, lint, security-scan]
    if: always()
    steps:
    - name: Send notification
      uses: actions/github-script@v6
      with:
        script: |
          const jobStatus = {
            test: '${{ needs.test.result }}',
            lint: '${{ needs.lint.result }}',
            security: '${{ needs.security-scan.result }}'
          };
          const success = jobStatus.test === 'success' && 
                         jobStatus.lint === 'success' && 
                         jobStatus.security === 'success';
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'notifications.yml',
            ref: context.ref,
            inputs: {
              status: success ? 'success' : 'failure',
              commit: context.sha,
              branch: context.ref
            }
          });
