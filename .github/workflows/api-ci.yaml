name: Auto Create Full Project Structure

on:
  workflow_dispatch:

jobs:
  create-structure:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Configure Git
      run: |
        git config user.name "github-actions"
        git config user.email "actions@github.com"

    - name: Create branch for auto-structure
      run: |
        git checkout -b auto-structure || git checkout auto-structure

    - name: Create directory structure
      run: |
        mkdir -p backend/app/{api/v1,models,schemas,database,core,services}
        mkdir -p backend/tests data/migrations scripts docs
        for dir in backend backend/app backend/app/api backend/app/api/v1 \
                 backend/app/models backend/app/schemas backend/app/database \
                 backend/app/core backend/app/services backend/tests; do
          touch "$dir/__init__.py"
        done

    - name: Create main.py
      run: |
        cat > backend/app/main.py << 'EOL'
from fastapi import FastAPI

app = FastAPI(title="Metreyar API", version="1.0.0")

@app.get("/")
def root():
    return {"message": "خوش آمدید به سرویس متره‌یار"}

@app.get("/health")
def health_check():
    return {"status": "healthy"}
EOL

    - name: Create database files
      run: |
        cat > backend/app/database/session.py << 'EOL'
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite+aiosqlite:///./metreyar.db"
engine = create_async_engine(DATABASE_URL, echo=True, future=True)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def get_db():
    async with AsyncSessionLocal() as session:
        yield session
EOL

        cat > backend/app/database/base.py << 'EOL'
from sqlalchemy.orm import declarative_base
from sqlalchemy import Column, Integer, DateTime, func

Base = declarative_base()

class BaseModel(Base):
    __abstract__ = True
    id = Column(Integer, primary_key=True, index=True)
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
EOL

    - name: Create core config and security
      run: |
        cat > backend/app/core/config.py << 'EOL'
from pydantic_settings import BaseSettings
from typing import List

class Settings(BaseSettings):
    PROJECT_NAME: str = "Metreyar API"
    VERSION: str = "1.0.0"
    DATABASE_URL: str = "sqlite+aiosqlite:///./metreyar.db"
    BACKEND_CORS_ORIGINS: List[str] = ["*"]
    DEBUG: bool = True

settings = Settings()
EOL

        cat > backend/app/core/security.py << 'EOL'
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)
EOL

    - name: Create models
      run: |
        cat > backend/app/models/material.py << 'EOL'
from sqlalchemy import Column, String, Float
from app.database.base import BaseModel

class Material(BaseModel):
    __tablename__ = "materials"
    name = Column(String(100), nullable=False)
    unit = Column(String(20), nullable=False)
    unit_price = Column(Float, nullable=False)
EOL

    - name: Create schemas
      run: |
        cat > backend/app/schemas/material.py << 'EOL'
from pydantic import BaseModel

class MaterialBase(BaseModel):
    name: str
    unit: str
    unit_price: float

class MaterialCreate(MaterialBase):
    pass

class MaterialRead(MaterialBase):
    id: int
EOL

    - name: Create API routes
      run: |
        cat > backend/app/api/v1/materials.py << 'EOL'
from fastapi import APIRouter

router = APIRouter()

@router.get("/materials")
def get_materials():
    return [{"name": "سیمان", "unit": "کیلوگرم", "unit_price": 5000}]
EOL

        cat > backend/app/api/v1/__init__.py << 'EOL'
from fastapi import APIRouter
from . import materials

api_router = APIRouter()
api_router.include_router(materials.router, prefix="/materials", tags=["materials"])
EOL

    - name: Create requirements.txt
      run: |
        cat > requirements.txt << 'EOL'
fastapi
uvicorn[standard]
sqlalchemy
aiosqlite
pydantic
pydantic-settings
passlib[bcrypt]
EOL

    - name: Commit changes
      run: |
        git add .
        git commit -m "Auto-create full project structure" || echo "No changes to commit"

    - name: Push branch
      run: |
        git push origin auto-structure --force

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Auto-create project structure"
        branch: auto-structure
        base: main
        title: "Auto-create full project structure"
        body: "این PR شامل ساختار کامل پروژه، فایل‌های اصلی و نمونه API است."
