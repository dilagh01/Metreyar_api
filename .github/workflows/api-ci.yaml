name: Metreyar API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: metreyar_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov httpx

    - name: Create test database
      run: |
        python -c "
        from app.core.database import Base, engine
        Base.metadata.create_all(bind=engine)
        print('Test database created successfully')
        "

    - name: Run basic tests
      run: |
        python -c "
        from main import app
        from fastapi.testclient import TestClient
        client = TestClient(app)
        
        # Test health endpoint
        response = client.get('/health')
        assert response.status_code == 200
        assert response.json() == {'status': 'healthy'}
        print('Health test passed')
        
        # Test root endpoint
        response = client.get('/')
        assert response.status_code == 200
        print('Root endpoint test passed')
        "

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install black flake8 isort

    - name: Check code formatting with Black
      run: |
        black --check app/ main.py --diff || echo "Black formatting issues found"

    - name: Check import sorting with isort
      run: |
        isort --check-only app/ main.py --diff || echo "Import sorting issues found"

    - name: Lint with flake8
      run: |
        flake8 app/ main.py --max-line-length=88 --ignore=E203,W503,E501,F401 || echo "Flake8 issues found"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run bandit security scanner
      run: |
        pip install bandit
        bandit -r app/ -x tests -ll || echo "Bandit scan completed with findings"

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security-scan]
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        tags: metreyar-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your deployment script here

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your deployment script here
